#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <sys/stat.h>
#include <dirent.h>
#include <malloc.h>
#include <unistd.h>
#include <cstdio>
#include <string>
#include <vector>
#include <regex>

bool smdh_OffsetIsInTitleStructs(unsigned int offset);
int lngoffset = 0;
int typemode = 0;
int otypemode = 0;
int typeoffs = 0;
FILE* smdhold;
FILE* utf16txt;
FILE* smdhnew;

bool smdh_OffsetIsInTitleStructs(unsigned int offset){
	if (offset >= 0x8 && offset < 0x2008){
		unsigned int gv0 = (offset - 8) % 0x200;
		lngoffset = (offset - 8) / 0x200;
		otypemode=typemode + 0;
		if (gv0 < 0x80){typemode=0; typeoffs=gv0;}
		if (gv0 >= 0x80 && gv0 < 0x180){typemode=1; typeoffs=gv0-0x80;}
		if (gv0 >= 0x180 && gv0 < 0x200){typemode=2; typeoffs=gv0-0x180;}
		return true;
	}
	return false;
}

int main(int argc, char* argv[]){
	if (argc > 1){
		if (strcmp(argv[1],"--help") == 0) {
			printf("Usage: %s smdhfile utf16txt output\n\n",argv[0]);
			printf("smdhfile - File name to point to a SMDH file made by bannertool\n");
			printf("utf16txt - File name to point to the name strings in UTF-16 format\n");
			printf("output - File name to save the fixed SMDH\n\n");
			printf("This tool will fix the broken UTF-16 encoding on SMDH generated by bannertool 1.1 or below.\n");
			printf("If you cannot run bannertool 1.2 due to \"GLIBC_2.29 missing\" errors, and you want to translate your homebrew title name, then this tool will help you fix the errors made by older bannertools.\n\n");
			printf("How to use:\n");
			printf("-----------\n\n");
			printf("1. Make the SMDH with just the flags and icons with bannertool.\n");
			printf("e.g. bannertool makesmdh -i app/icon.png -o build/icon_tmp.icn\n\n");
			printf("2. Make a UTF-16 encoded file containing the names in all languages supported by the 3DS.\n");
			printf("See %s --help-utf16txt for details.\n\n",argv[0]);
			printf("3. Run this tool with the required arguments.\n");
			printf("e.g. %s build/icon_tmp.icn app/smdh.txt build/icon.icn\n\n",argv[0]);
			return 1;
		} else if (strcmp(argv[1],"--help-utf16txt") == 0) {
			printf("Example with Featherpad\n\n");
			printf("1. Run Featherpad\n");
			printf("2. Select \"Options\" > \"Encoding\" > \"Unicode\" > \"UTF-16\"\n");
			printf("3. Write the translated strings for the following languages:\n");
			printf("JP,EN,DE,FR,ES,PT,NL,RU,KR,CN,TW\n");
			printf("in this way:\n");
			printf("Short description (Name in System Settings)\n");
			printf("Long description (HOME menu and details in System Settings)\n");
			printf("Creator's name (Everywhere)\n");
			printf("[empty line]\n");
			printf("* repeat the 4 lines for each language *\n\n");
			printf("4. Select \"File\" > \"Save with encoding\"\n");
			printf("5. Save it as \"smdh.txt\" in the app directory\n");
			printf("6. Say \"No\" to saving the file with Windows line break encoding.\n");
			return 1;
		} else if (strcmp(argv[1],"--credits") == 0) {
			printf("This tool was made by CyberYoshi64 because Steveice10 is making his newer version of bannertool incompatible with my PC.\n\nTBH I think it's a d**k move...\n");
			printf("F**k you too, man. >:(\n");
			return 1;
		} else if (argc > 3) {
			long smdhsize;
			long utfsize;
			unsigned char osmdhbyte;
			unsigned char utf16byte;
			int isUtfFileAhead = 0;
			unsigned short utf16char;
			unsigned char utf16char_hi;
			unsigned char utf16char_lo;
			long fileoffset = 0;
			long utffileoffset = 0;
			smdhold = fopen(argv[1],"r+");
			fseek(smdhold, 0, SEEK_END);
			smdhsize=ftell(smdhold);
			if (smdhsize == 0x36C0){
				fseek(smdhold, 0, SEEK_SET);
				smdhnew = fopen(argv[3],"w+");
				utf16txt = fopen(argv[2],"r+");
				fseek(utf16txt, 0, SEEK_END);
				utfsize=ftell(utf16txt);
				fseek(utf16txt, 0, SEEK_SET);
				while (fileoffset < 0x36c0){
					if (smdh_OffsetIsInTitleStructs(fileoffset)){
						if (otypemode != typemode){
							if (typemode==0){
								fread(&utf16char_lo,1,1,utf16txt);
								fread(&utf16char_lo,1,1,utf16txt);
								utffileoffset+=2;
							}
							isUtfFileAhead=0;
						}
						if (isUtfFileAhead == 0){
							fread(&utf16char_lo,1,1,utf16txt);
							utf16char = (utf16char_lo + 0) & 255;
							fread(&utf16char_hi,1,1,utf16txt);
							utf16char = (utf16char_hi << 8) + utf16char;
							utffileoffset+=2;
							isUtfFileAhead = (utffileoffset >= utfsize)+(utf16char < 32);
						}
						if (isUtfFileAhead == 0){
							fwrite(&utf16char_lo,1,1,smdhnew);
							fwrite(&utf16char_hi,1,1,smdhnew);
						} else {
							utf16char_lo = 0;
							fwrite(&utf16char_lo,1,1,smdhnew);
							fwrite(&utf16char_lo,1,1,smdhnew);
						}
						fread(&osmdhbyte, 1, 1, smdhold);
						fread(&osmdhbyte, 1, 1, smdhold);
					} else {
						fread(&osmdhbyte, 1, 1, smdhold);
						fwrite(&osmdhbyte,1, 1, smdhnew);
						fread(&osmdhbyte, 1, 1, smdhold);
						fwrite(&osmdhbyte,1, 1, smdhnew);
					}
					fileoffset+=2;
				}
				fclose(smdhold);
				fclose(smdhnew);
				fclose(utf16txt);
				return 0;
			}
			printf("The input SMDH you passed in, doesn't seem like a SMDH, due to its size.\n");
			return 2;
		}
	}
	printf("Usage: %s smdhfile utf16txt output\n\n",argv[0]);
	printf("smdhfile - File name to point to a SMDH file made by bannertool\n");
	printf("utf16txt - File name to point to the name strings in UTF-16 format\n");
	printf("output - File name to save the fixed SMDH\n");
	return 1;
}
